// Copyright 2020 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once
#include <cinttypes>
#include <memory>
#include <vector>

namespace voicefx {
	class resampler {
		std::vector<std::shared_ptr<void>> _instance;

		uint32_t _channels;
		float    _ratio;
		bool     _dirty;

		public:
		~resampler();

		/** Create a new resampler.
		 */
		resampler();

		public:
		// Copy Operator & Constructor
		resampler(const resampler&) = delete;
		resampler& operator=(const resampler&) = delete;

		// Move Operator & Constructor
		resampler(resampler&&) noexcept;
		resampler& operator=(resampler&&) noexcept;

		public:
		float ratio();
		void  ratio(uint32_t in_samplerate, uint32_t out_samplerate);

		uint32_t channels();
		void     channels(uint32_t channels);

		/** Load the resampler.
		 *
		 * This will try to initialize the resampler with the given configuration.
		 * It is automatically called by process() when certain settings change.
		 */
		void load();

		/** Clear any internal state.
		 *
		 */
		void clear();

		/** Resample the input to the output
		 *
		 * @param in_buffer An array of buffers of input samples.
		 * @param in_samples The number of samples contained in in_buffer.
		 * @param in_samples_used The number of samples used by resampling.
		 * @param out_buffer An array of buffers for output samples.
		 * @param out_sample The number of samples containable in out_buffer.
		 * @param out_samples_generated The number of samples generated by resampling.
		 */
		void process(const float* in_buffer[], size_t in_samples, size_t& in_samples_used, float* out_buffer[],
					 size_t out_samples, size_t& out_samples_generated);

		public:
		static uint32_t calculate_delay(uint32_t in_samplerate, uint32_t out_samplerate);
	};
} // namespace voicefx
